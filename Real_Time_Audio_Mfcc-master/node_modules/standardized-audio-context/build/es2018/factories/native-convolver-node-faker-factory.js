import * as tslib_1 from "tslib";
import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';
import { interceptConnections } from '../helpers/intercept-connections';
export const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode) => {
    return (nativeContext, _a) => {
        var { buffer, disableNormalization } = _a, audioNodeOptions = tslib_1.__rest(_a, ["buffer", "disableNormalization"]);
        let convolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());
        assignNativeAudioNodeOptions(convolverNode, audioNodeOptions);
        const inputGainNode = createNativeGainNode(nativeContext, Object.assign({}, audioNodeOptions, { gain: 1 }));
        const outputGainNode = createNativeGainNode(nativeContext, Object.assign({}, audioNodeOptions, { gain: 1 }));
        inputGainNode
            .connect(convolverNode)
            .connect(outputGainNode);
        const nativeConvolverNodeFaker = {
            get buffer() {
                return convolverNode.buffer;
            },
            set buffer(value) {
                if (convolverNode.buffer !== null) {
                    inputGainNode.disconnect(convolverNode);
                    convolverNode.disconnect(outputGainNode);
                    const normalize = convolverNode.normalize;
                    convolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());
                    assignNativeAudioNodeOptions(convolverNode, {
                        channelCount: inputGainNode.channelCount,
                        channelCountMode: inputGainNode.channelCountMode,
                        channelInterpretation: inputGainNode.channelInterpretation
                    });
                    convolverNode.normalize = normalize;
                    inputGainNode
                        .connect(convolverNode)
                        .connect(outputGainNode);
                }
                convolverNode.buffer = value;
            },
            get bufferSize() {
                return undefined;
            },
            get channelCount() {
                return convolverNode.channelCount;
            },
            set channelCount(value) {
                convolverNode.channelCount = value;
                inputGainNode.channelCount = value;
                outputGainNode.channelCount = value;
            },
            get channelCountMode() {
                return convolverNode.channelCountMode;
            },
            set channelCountMode(value) {
                convolverNode.channelCountMode = value;
                inputGainNode.channelCountMode = value;
                outputGainNode.channelCountMode = value;
            },
            get channelInterpretation() {
                return convolverNode.channelInterpretation;
            },
            set channelInterpretation(value) {
                convolverNode.channelInterpretation = value;
                inputGainNode.channelInterpretation = value;
                outputGainNode.channelInterpretation = value;
            },
            get context() {
                return convolverNode.context;
            },
            get inputs() {
                return [inputGainNode];
            },
            get numberOfInputs() {
                return convolverNode.numberOfInputs;
            },
            get numberOfOutputs() {
                return convolverNode.numberOfOutputs;
            },
            get normalize() {
                return convolverNode.normalize;
            },
            set normalize(value) {
                convolverNode.normalize = value;
            },
            addEventListener(...args) {
                return inputGainNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent(...args) {
                return inputGainNode.dispatchEvent(args[0]);
            },
            removeEventListener(...args) {
                return inputGainNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        if (buffer !== nativeConvolverNodeFaker.buffer) {
            nativeConvolverNodeFaker.buffer = buffer;
        }
        if (disableNormalization === nativeConvolverNodeFaker.normalize) {
            nativeConvolverNodeFaker.normalize = !disableNormalization;
        }
        return interceptConnections(nativeConvolverNodeFaker, outputGainNode);
    };
};
//# sourceMappingURL=/build/es2018/factories/native-convolver-node-faker-factory.js.map